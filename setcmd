.KEY CMD,ARG1,ARG2,ARG3,ARG4
.BRA {
.KET }

; vim: set syntax=amiga ts=2 expandtab:

; $VER: SetCmd release 1.0.0

set sc_release="1.0.0-dev"


; Formatting
set t_white     "*E[32m"
set t_black     "*E[31m"
set t_blue      "*E[33m"
set b_blue      "*E[43m"
set b_default   "*E[40m"
set bold_on     "*E[1m"
set bold_off    "*E[22m"
set italic_on   "*E[3m"
set italic_off  "*E[23m"


; Unset all our used variables
unset sc_command
unset sc_current
unset sc_current_file
unset sc_current_path
unset sc_version
unset sc_target

;#
;# Options parsing
;#

; LIST command and aliases
if "{CMD}" eq "init"
  skip init
endif
if "{CMD}" eq "list"
  skip list
endif
if "{CMD}" eq "show"
  skip show
endif
if "{CMD}" eq "set"
  skip set
endif
if "{CMD}" eq "add-cmd"
  skip create
endif
if "{CMD}" eq "delete-cmd"
  skip delete
endif
if "{CMD}" eq "add-version"
  skip add
endif
if "{CMD}" eq "delete-version"
  skip remove
endif
skip usage

quit


;#
;# Labels for sub-tasks
;#

;
; Set up the PATH with SetCmd at the start
;
LAB init
delete TMP:SetCmd all quiet
makedir TMP:SetCmd
path > TMP:SetCmd/path.txt
rx SETCMD:support/path.rx
path reset quiet
execute TMP:SetCMD/init.cmd
if "{arg1}" not eq "quiet"
  echo "SetCmd ${sc_release} installed"
endif
if "{arg1}" eq "verbose"
  skip list
endif

quit

;
; List all commands we manage
;
LAB list
if "{arg1}" not eq "verbose"
  list SETCMD:path LFORMAT="%s"
else
  foreach cmd in SETCMD:path/#?
    echo "${cmd}"
    foreach slink in "SETCMD:path/${cmd}"
      set target "`list lformat="%R" pat ${slink}`"
      set current="`pathpart file ${target}`"
      foreach vers in "SETCMD:cmds/$cmd/#?"
        if "${vers}" eq "${current}"
          echo "  ${t_black}[${t_blue}$vers${t_black}]"
        else
          echo "  ${t_white}$vers${t_black}"
        endif
      end
    end
  end
endif

quit


;
; Show details for specified command
;
LAB show
set sc_command="{arg1}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if not exists SETCMD:path/$sc_command
  echo "${sc_command} is not managed by setcmd"
  quit
endif
set sc_current=`list SETCMD:path lformat="%R" pat="${sc_command}"`
set sc_current_file=`pathpart FILE ${sc_current}`

; Check for stub commands, e.g. just been added with no versions
if "${sc_current_file}" eq "stub"
  set sc_current_path="stub"
endif
if "`list SETCMD:cmds/${sc_command} LFORMAT="%s"`" eq ""
  set sc_current_path="stub"
else
  set sc_current_path=`list setcmd:cmds/${sc_command} lformat="%R" pat="${sc_current_file}"`
endif

echo "Command            : ${sc_command}"
echo "Current version    : ${t_white}${b_blue}${sc_current_file}${t_black}${b_default} (${t_blue}${sc_current_path}${t_black})"
echo "Available Versions"
echo "------------------"
list setcmd:cmds/${sc_command} lformat="%s (${t_blue}%R${t_black})"
quit


;
; Set a version
;
LAB set
set sc_command="{arg1}"
set sc_version="{arg2}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if "${sc_version}" eq ""
  echo "No version specified. Run setcmd without arguments for usage information."
  quit
endif
if not exists SETCMD:path/${sc_command}
  echo "${sc_command} is not managed by setcmd"
  quit
endif
if not exists SETCMD:cmds/${sc_command}/${sc_version}
  echo "command ${sc_command} : version ${sc_version} unknown"
  quit
endif
delete SETCMD:path/${sc_command} > NIL:
makelink SETCMD:path/${sc_command} SETCMD:cmds/${sc_command}/${sc_version}
;echo "Set $sc_command to version $sc_version"
quit


;
; Add a new command
;
LAB create
set sc_command="{arg1}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if exists SETCMD:path/${sc_command}
  echo "${sc_command} is already managed by setcmd"
  quit
endif
makedir setcmd:cmds/${sc_command}
makelink setcmd:path/${sc_command} setcmd:stub
;echo "Added command ${sc_command}"
quit


;
; Add a version to a command
;
LAB add
set sc_command="{arg1}"
set sc_version="{arg2}"
set sc_target="{arg3}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if "${sc_version}" eq ""
  echo "No version specified. Run setcmd without arguments for usage information."
  quit
endif
if "${sc_target}" eq ""
  echo "No target specified. Run setcmd without arguments for usage information."
  quit
endif
if not exists SETCMD:path/${sc_command}
  echo "${sc_command} is not managed by setcmd"
  quit
endif
if exists "SETCMD:cmds/${sc_command}/${sc_version}"
  echo "Version ${sc_version} already exists for ${sc_command}"
  quit
endif
makelink SETCMD:cmds/${sc_command}/${sc_version} ${sc_target}
quit


;
; Remove a version
;
LAB remove
set sc_command="{arg1}"
set sc_version="{arg2}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if "${sc_version}" eq ""
  echo "No version specified. Run setcmd without arguments for usage information."
  quit
endif
if not exists SETCMD:path/${sc_command}
  echo "${sc_command} is not managed by setcmd"
  quit
endif
if not exists "SETCMD:cmds/${sc_command}/${sc_version}"
  echo "Version ${sc_version} does not exist for ${sc_command}"
  quit
endif
; Check to see if we're removing the current version
set sc_current=`list SETCMD:path lformat="%R" pat="${sc_command}"`
set sc_current_file=`pathpart FILE ${sc_current}`
if "${sc_current_file}" eq "${sc_version}"
  echo "Cannot remove current version (${sc_version}) of ${sc_command}"
  quit
endif
delete SETCMD:cmds/${sc_command}/${sc_version}
;echo "Removed version ${sc_version} from ${sc_command}"
quit


;
; Delete a command
;
LAB delete
set sc_command="{ARG1}"
if "${sc_command}" eq ""
  echo "No command specified. Run setcmd without arguments for usage information."
  quit
endif
if not exists SETCMD:path/${sc_command}
  echo "${sc_command} is not managed by setcmd"
  quit
endif
if "${sc_command}" eq "setcmd"
  echo "You cannot remove setcmd from setcmd control!"
  quit
endif
echo "This will remove the command ${sc_command} from setcmd."
ask "Do you wish to proceed ? (Y/N) > "
if WARN
  delete SETCMD:path/${sc_command} > NIL:
  delete SETCMD:cmds/${sc_command} all > NIL:
  echo "${sc_command} removed from setcmd"
else
  echo "${sc_command} not removed"
  quit
endif
quit


;
; Display usage text
;
LAB usage
echo "SetCmd ${sc_release}   (c) 2020 Mark Dastmalchi-Round   [http://markround.com/amiga]"
echo "--------------------------------------------------------------------------------"
echo ""
echo "Usage:"
echo ""

echo "${bold_on}init${bold_off} ${t_white}quiet | verbose${t_black}"
echo "  Sets up the SetCmd path for the current shell."
echo "  example: setcmd init verbose"

echo "${bold_on}list${bold_off} ${t_white}verbose${t_black}"
echo "  List all commands managed by setcmd. The optional ${t_white}verbose${t_black} argument shows additional detail."
echo "  example: setcmd list"

echo "${bold_on}show${bold_off} ${t_blue}cmd${t_black}"
echo "  Shows details for specified command ${t_blue}cmd${t_black}"
echo "  example: setcmd show uae"

echo "${bold_on}set${bold_off} ${t_blue}cmd version${t_black}"
echo "  Sets ${t_blue}cmd${t_black} to ${t_blue}version${t_black}"
echo "  example: setcmd set uae system"

echo "${bold_on}add-cmd${bold_off} ${t_blue}cmd${t_black}"
echo "  Adds a new command ${t_blue}cmd${t_black} and points it to a stub"
echo "  example: setcmd create-cmd uae"

echo "${bold_on}delete-cmd${bold_off} ${t_blue}cmd${t_black}"
echo "  Removes command ${t_blue}cmd${t_black} from setcmd"
echo "  example: setcmd delete-cmd uae"

echo "${bold_on}add-version${bold_off} ${t_blue}cmd version target${t_black}"
echo "  Adds a new version for ${t_blue}cmd${t_black}, named ${t_blue}version${t_black} and pointing at the path ${t_blue}target${t_black}."
echo "  example: setcmd create-version uae system System:Emulation/E-UAE-amigfx/uae"

echo "${bold_on}delete-version${bold_off} ${t_blue}cmd version${t_black}"
echo "  Removes version ${t_blue}version${t_black} from ${t_blue}cmd${t_black}"
echo "  example: setcmd delete-version uae 1.0.0-beta"
quit
